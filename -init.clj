nil (do (set! *warn-on-reflection* nil) (require (quote cljsbuild.compiler) (quote cljsbuild.crossover) (quote cljsbuild.util) (quote clj-stacktrace.repl) (quote clojure.java.io) (quote figwheel.core)) (try (do (do (clojure.core/letfn [(copy-crossovers__11694__auto__ [] (cljsbuild.crossover/copy-crossovers "c:\\Users\\Gary\\Documents\\Projects\\Github\\om-react-pixi\\target/cljsbuild-crossover" (quote [])))] (clojure.core/when (clojure.core/not-empty (quote [])) (copy-crossovers__11694__auto__) (cljsbuild.util/once-every-bg 1000 "copying crossovers" copy-crossovers__11694__auto__)) (clojure.core/let [crossover-macro-paths__11695__auto__ (cljsbuild.crossover/crossover-macro-paths (quote [])) build__11696__auto__ (clojure.core/first (quote ({:parsed-notify-command {:shell ()}, :id "interactive", :source-paths ["src/omreactpixi" "dev-src/examples/interactive"], :jar false, :notify-command nil, :incremental true, :assert true, :compiler {:source-map true, :output-dir "dev-resources/public/examples/interactive/out", :output-to "dev-resources/public/examples/interactive/out/interactive.js", :optimizations :none, :warnings true, :externs ["closure-js/externs"], :libs ["closure-js/libs"], :pretty-print true}}))) cljs-paths__11697__auto__ (:source-paths build__11696__auto__) compiler-options__11698__auto__ (:compiler build__11696__auto__) compiler-env__11699__auto__ (cljs.env/default-compiler-env compiler-options__11698__auto__) change-server__11700__auto__ (figwheel.core/start-server {:http-server-root "public", :server-port 8081, :ring-handler "webserver.servefromjar/reactpixifromjar", :output-to "dev-resources/public/examples/interactive/out/interactive.js", :output-dir "dev-resources/public/examples/interactive/out", :js-dirs ["dev-resources/public/examples/interactive/out" "dev-resources/public/examples/interactive/out/interactive.js"], :resource-paths ["c:\\Users\\Gary\\Documents\\Projects\\Github\\om-react-pixi\\dev-resources" "c:\\Users\\Gary\\Documents\\Projects\\Github\\om-react-pixi\\resources"], :root "c:\\Users\\Gary\\Documents\\Projects\\Github\\om-react-pixi"})] (clojure.core/letfn [(get-mtimes__11701__auto__ [paths__11702__auto__] (clojure.core/into {} (clojure.core/map (clojure.core/fn [path__11703__auto__] [path__11703__auto__ (.lastModified (clojure.java.io/file path__11703__auto__))]) paths__11702__auto__))) (get-dependency-mtimes__11704__auto__ [] (clojure.core/let [macro-files__11705__auto__ (clojure.core/map :absolute crossover-macro-paths__11695__auto__) clj-files-in-cljs-paths__11706__auto__ (clojure.core/into {} (clojure.core/for [cljs-path__11707__auto__ cljs-paths__11697__auto__] [cljs-path__11707__auto__ (cljsbuild.util/find-files cljs-path__11707__auto__ #{"clj"})])) cljs-files__11708__auto__ (clojure.core/mapcat (fn* [p1__11690__11709__auto__] (cljsbuild.util/find-files p1__11690__11709__auto__ #{"cljs"})) (if "c:\\Users\\Gary\\Documents\\Projects\\Github\\om-react-pixi\\target/cljsbuild-crossover" (clojure.core/conj cljs-paths__11697__auto__ "c:\\Users\\Gary\\Documents\\Projects\\Github\\om-react-pixi\\target/cljsbuild-crossover") cljs-paths__11697__auto__)) lib-paths__11710__auto__ (:libs compiler-options__11698__auto__) js-files__11711__auto__ (clojure.core/->> (clojure.core/or lib-paths__11710__auto__ []) (clojure.core/mapcat (fn* [p1__11691__11712__auto__] (cljsbuild.util/find-files p1__11691__11712__auto__ #{"js"}))) (clojure.core/remove (fn* [p1__11692__11713__auto__] (.startsWith p1__11692__11713__auto__ (:output-dir compiler-options__11698__auto__)))) (clojure.core/remove (fn* [p1__11693__11714__auto__] (.endsWith p1__11693__11714__auto__ (:output-to compiler-options__11698__auto__))))) macro-mtimes__11715__auto__ (get-mtimes__11701__auto__ macro-files__11705__auto__) clj-mtimes__11716__auto__ (get-mtimes__11701__auto__ (clojure.core/mapcat clojure.core/second clj-files-in-cljs-paths__11706__auto__)) cljs-mtimes__11717__auto__ (get-mtimes__11701__auto__ cljs-files__11708__auto__) js-mtimes__11718__auto__ (get-mtimes__11701__auto__ js-files__11711__auto__)] (clojure.core/merge macro-mtimes__11715__auto__ clj-mtimes__11716__auto__ cljs-mtimes__11717__auto__ js-mtimes__11718__auto__)))] (clojure.core/loop [dependency-mtimes__11719__auto__ {}] (clojure.core/let [new-dependency-mtimes__11720__auto__ (try (clojure.core/let [new-mtimes__11721__auto__ (clojure.core/binding [cljs.env/*compiler* compiler-env__11699__auto__] (cljsbuild.compiler/run-compiler (:source-paths build__11696__auto__) "c:\\Users\\Gary\\Documents\\Projects\\Github\\om-react-pixi\\target/cljsbuild-crossover" crossover-macro-paths__11695__auto__ (:compiler build__11696__auto__) (:parsed-notify-command build__11696__auto__) (:incremental build__11696__auto__) (:assert build__11696__auto__) dependency-mtimes__11719__auto__ false))] (clojure.core/when (clojure.core/not= dependency-mtimes__11719__auto__ new-mtimes__11721__auto__) (figwheel.core/check-for-changes change-server__11700__auto__ dependency-mtimes__11719__auto__ new-mtimes__11721__auto__)) new-mtimes__11721__auto__) (catch java.lang.Throwable e__11722__auto__ (clj-stacktrace.repl/pst+ e__11722__auto__) (figwheel.core/compile-error-occured change-server__11700__auto__ e__11722__auto__) (get-dependency-mtimes__11704__auto__)))] (figwheel.core/check-for-css-changes change-server__11700__auto__) (java.lang.Thread/sleep 100) (recur new-dependency-mtimes__11720__auto__))))))) (java.lang.System/exit 0)) (catch cljsbuild.test.TestsFailedException e__11688__auto__ (java.lang.System/exit 1)) (catch java.lang.Exception e__11688__auto__ (do (.printStackTrace e__11688__auto__) (java.lang.System/exit 1)))))